using System.Text;
using Common.Exceptions;

namespace SudokuSolver;

public class Solver
{
    public Solver()
    {
        CellGroups = new Dictionary<int, int[]>
        {
            { 0, new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 27, 36, 45, 54, 63, 72, 1, 2, 9, 10, 11, 18, 19, 20 } },
            { 1, new[] { 0, 2, 3, 4, 5, 6, 7, 8, 10, 19, 28, 37, 46, 55, 64, 73, 0, 2, 9, 10, 11, 18, 19, 20 } },
            { 2, new[] { 0, 1, 3, 4, 5, 6, 7, 8, 11, 20, 29, 38, 47, 56, 65, 74, 0, 1, 9, 10, 11, 18, 19, 20 } },
            { 3, new[] { 0, 1, 2, 4, 5, 6, 7, 8, 12, 21, 30, 39, 48, 57, 66, 75, 4, 5, 12, 13, 14, 21, 22, 23 } },
            { 4, new[] { 0, 1, 2, 3, 5, 6, 7, 8, 13, 22, 31, 40, 49, 58, 67, 76, 3, 5, 12, 13, 14, 21, 22, 23 } },
            { 5, new[] { 0, 1, 2, 3, 4, 6, 7, 8, 14, 23, 32, 41, 50, 59, 68, 77, 3, 4, 12, 13, 14, 21, 22, 23 } },
            { 6, new[] { 0, 1, 2, 3, 4, 5, 7, 8, 15, 24, 33, 42, 51, 60, 69, 78, 7, 8, 15, 16, 17, 24, 25, 26 } },
            { 7, new[] { 0, 1, 2, 3, 4, 5, 6, 8, 16, 25, 34, 43, 52, 61, 70, 79, 6, 8, 15, 16, 17, 24, 25, 26 } },
            { 8, new[] { 0, 1, 2, 3, 4, 5, 6, 7, 17, 26, 35, 44, 53, 62, 71, 80, 6, 7, 15, 16, 17, 24, 25, 26 } },
            { 9, new[] { 10, 11, 12, 13, 14, 15, 16, 17, 0, 18, 27, 36, 45, 54, 63, 72, 0, 1, 2, 10, 11, 18, 19, 20 } },
            { 10, new[] { 9, 11, 12, 13, 14, 15, 16, 17, 1, 19, 28, 37, 46, 55, 64, 73, 0, 1, 2, 9, 11, 18, 19, 20 } },
            { 11, new[] { 9, 10, 12, 13, 14, 15, 16, 17, 2, 20, 29, 38, 47, 56, 65, 74, 0, 1, 2, 9, 10, 18, 19, 20 } },
            { 12, new[] { 9, 10, 11, 13, 14, 15, 16, 17, 3, 21, 30, 39, 48, 57, 66, 75, 3, 4, 5, 13, 14, 21, 22, 23 } },
            { 13, new[] { 9, 10, 11, 12, 14, 15, 16, 17, 4, 22, 31, 40, 49, 58, 67, 76, 3, 4, 5, 12, 14, 21, 22, 23 } },
            { 14, new[] { 9, 10, 11, 12, 13, 15, 16, 17, 5, 23, 32, 41, 50, 59, 68, 77, 3, 4, 5, 12, 13, 21, 22, 23 } },
            { 15, new[] { 9, 10, 11, 12, 13, 14, 16, 17, 6, 24, 33, 42, 51, 60, 69, 78, 6, 7, 8, 16, 17, 24, 25, 26 } },
            { 16, new[] { 9, 10, 11, 12, 13, 14, 15, 17, 7, 25, 34, 43, 52, 61, 70, 79, 6, 7, 8, 15, 17, 24, 25, 26 } },
            { 17, new[] { 9, 10, 11, 12, 13, 14, 15, 16, 8, 26, 35, 44, 53, 62, 71, 80, 6, 7, 8, 15, 16, 24, 25, 26 } },
            { 18, new[] { 19, 20, 21, 22, 23, 24, 25, 26, 0, 9, 27, 36, 45, 54, 63, 72, 0, 1, 2, 9, 10, 11, 19, 20 } },
            { 19, new[] { 18, 20, 21, 22, 23, 24, 25, 26, 1, 10, 28, 37, 46, 55, 64, 73, 0, 1, 2, 9, 10, 11, 18, 20 } },
            { 20, new[] { 18, 19, 21, 22, 23, 24, 25, 26, 2, 11, 29, 38, 47, 56, 65, 74, 0, 1, 2, 9, 10, 11, 18, 19 } },
            { 21, new[] { 18, 19, 20, 22, 23, 24, 25, 26, 3, 12, 30, 39, 48, 57, 66, 75, 3, 4, 5, 12, 13, 14, 22, 23 } },
            { 22, new[] { 18, 19, 20, 21, 23, 24, 25, 26, 4, 13, 31, 40, 49, 58, 67, 76, 3, 4, 5, 12, 13, 14, 21, 23 } },
            { 23, new[] { 18, 19, 20, 21, 22, 24, 25, 26, 5, 14, 32, 41, 50, 59, 68, 77, 3, 4, 5, 12, 13, 14, 21, 22 } },
            { 24, new[] { 18, 19, 20, 21, 22, 23, 25, 26, 6, 15, 33, 42, 51, 60, 69, 78, 6, 7, 8, 15, 16, 17, 25, 26 } },
            { 25, new[] { 18, 19, 20, 21, 22, 23, 24, 26, 7, 16, 34, 43, 52, 61, 70, 79, 6, 7, 8, 15, 16, 17, 24, 26 } },
            { 26, new[] { 18, 19, 20, 21, 22, 23, 24, 25, 8, 17, 35, 44, 53, 62, 71, 80, 6, 7, 8, 15, 16, 17, 24, 25 } },
            { 27, new[] { 28, 29, 30, 31, 32, 33, 34, 35, 0, 9, 18, 36, 45, 54, 63, 72, 28, 29, 36, 37, 38, 45, 46, 47 } },
            { 28, new[] { 27, 29, 30, 31, 32, 33, 34, 35, 1, 10, 19, 37, 46, 55, 64, 73, 27, 29, 36, 37, 38, 45, 46, 47 } },
            { 29, new[] { 27, 28, 30, 31, 32, 33, 34, 35, 2, 11, 20, 38, 47, 56, 65, 74, 27, 28, 36, 37, 38, 45, 46, 47 } },
            { 30, new[] { 27, 28, 29, 31, 32, 33, 34, 35, 3, 12, 21, 39, 48, 57, 66, 75, 31, 32, 39, 40, 41, 48, 49, 50 } },
            { 31, new[] { 27, 28, 29, 30, 32, 33, 34, 35, 4, 13, 22, 40, 49, 58, 67, 76, 30, 32, 39, 40, 41, 48, 49, 50 } },
            { 32, new[] { 27, 28, 29, 30, 31, 33, 34, 35, 5, 14, 23, 41, 50, 59, 68, 77, 30, 31, 39, 40, 41, 48, 49, 50 } },
            { 33, new[] { 27, 28, 29, 30, 31, 32, 34, 35, 6, 15, 24, 42, 51, 60, 69, 78, 34, 35, 42, 43, 44, 51, 52, 53 } },
            { 34, new[] { 27, 28, 29, 30, 31, 32, 33, 35, 7, 16, 25, 43, 52, 61, 70, 79, 33, 35, 42, 43, 44, 51, 52, 53 } },
            { 35, new[] { 27, 28, 29, 30, 31, 32, 33, 34, 8, 17, 26, 44, 53, 62, 71, 80, 33, 34, 42, 43, 44, 51, 52, 53 } },
            { 36, new[] { 37, 38, 39, 40, 41, 42, 43, 44, 0, 9, 18, 27, 45, 54, 63, 72, 27, 28, 29, 37, 38, 45, 46, 47 } },
            { 37, new[] { 36, 38, 39, 40, 41, 42, 43, 44, 1, 10, 19, 28, 46, 55, 64, 73, 27, 28, 29, 36, 38, 45, 46, 47 } },
            { 38, new[] { 36, 37, 39, 40, 41, 42, 43, 44, 2, 11, 20, 29, 47, 56, 65, 74, 27, 28, 29, 36, 37, 45, 46, 47 } },
            { 39, new[] { 36, 37, 38, 40, 41, 42, 43, 44, 3, 12, 21, 30, 48, 57, 66, 75, 30, 31, 32, 40, 41, 48, 49, 50 } },
            { 40, new[] { 36, 37, 38, 39, 41, 42, 43, 44, 4, 13, 22, 31, 49, 58, 67, 76, 30, 31, 32, 39, 41, 48, 49, 50 } },
            { 41, new[] { 36, 37, 38, 39, 40, 42, 43, 44, 5, 14, 23, 32, 50, 59, 68, 77, 30, 31, 32, 39, 40, 48, 49, 50 } },
            { 42, new[] { 36, 37, 38, 39, 40, 41, 43, 44, 6, 15, 24, 33, 51, 60, 69, 78, 33, 34, 35, 43, 44, 51, 52, 53 } },
            { 43, new[] { 36, 37, 38, 39, 40, 41, 42, 44, 7, 16, 25, 34, 52, 61, 70, 79, 33, 34, 35, 42, 44, 51, 52, 53 } },
            { 44, new[] { 36, 37, 38, 39, 40, 41, 42, 43, 8, 17, 26, 35, 53, 62, 71, 80, 33, 34, 35, 42, 43, 51, 52, 53 } },
            { 45, new[] { 46, 47, 48, 49, 50, 51, 52, 53, 0, 9, 18, 27, 36, 54, 63, 72, 27, 28, 29, 36, 37, 38, 46, 47 } },
            { 46, new[] { 45, 47, 48, 49, 50, 51, 52, 53, 1, 10, 19, 28, 37, 55, 64, 73, 27, 28, 29, 36, 37, 38, 45, 47 } },
            { 47, new[] { 45, 46, 48, 49, 50, 51, 52, 53, 2, 11, 20, 29, 38, 56, 65, 74, 27, 28, 29, 36, 37, 38, 45, 46 } },
            { 48, new[] { 45, 46, 47, 49, 50, 51, 52, 53, 3, 12, 21, 30, 39, 57, 66, 75, 30, 31, 32, 39, 40, 41, 49, 50 } },
            { 49, new[] { 45, 46, 47, 48, 50, 51, 52, 53, 4, 13, 22, 31, 40, 58, 67, 76, 30, 31, 32, 39, 40, 41, 48, 50 } },
            { 50, new[] { 45, 46, 47, 48, 49, 51, 52, 53, 5, 14, 23, 32, 41, 59, 68, 77, 30, 31, 32, 39, 40, 41, 48, 49 } },
            { 51, new[] { 45, 46, 47, 48, 49, 50, 52, 53, 6, 15, 24, 33, 42, 60, 69, 78, 33, 34, 35, 42, 43, 44, 52, 53 } },
            { 52, new[] { 45, 46, 47, 48, 49, 50, 51, 53, 7, 16, 25, 34, 43, 61, 70, 79, 33, 34, 35, 42, 43, 44, 51, 53 } },
            { 53, new[] { 45, 46, 47, 48, 49, 50, 51, 52, 8, 17, 26, 35, 44, 62, 71, 80, 33, 34, 35, 42, 43, 44, 51, 52 } },
            { 54, new[] { 55, 56, 57, 58, 59, 60, 61, 62, 0, 9, 18, 27, 36, 45, 63, 72, 55, 56, 63, 64, 65, 72, 73, 74 } },
            { 55, new[] { 54, 56, 57, 58, 59, 60, 61, 62, 1, 10, 19, 28, 37, 46, 64, 73, 54, 56, 63, 64, 65, 72, 73, 74 } },
            { 56, new[] { 54, 55, 57, 58, 59, 60, 61, 62, 2, 11, 20, 29, 38, 47, 65, 74, 54, 55, 63, 64, 65, 72, 73, 74 } },
            { 57, new[] { 54, 55, 56, 58, 59, 60, 61, 62, 3, 12, 21, 30, 39, 48, 66, 75, 58, 59, 66, 67, 68, 75, 76, 77 } },
            { 58, new[] { 54, 55, 56, 57, 59, 60, 61, 62, 4, 13, 22, 31, 40, 49, 67, 76, 57, 59, 66, 67, 68, 75, 76, 77 } },
            { 59, new[] { 54, 55, 56, 57, 58, 60, 61, 62, 5, 14, 23, 32, 41, 50, 68, 77, 57, 58, 66, 67, 68, 75, 76, 77 } },
            { 60, new[] { 54, 55, 56, 57, 58, 59, 61, 62, 6, 15, 24, 33, 42, 51, 69, 78, 61, 62, 69, 70, 71, 78, 79, 80 } },
            { 61, new[] { 54, 55, 56, 57, 58, 59, 60, 62, 7, 16, 25, 34, 43, 52, 70, 79, 60, 62, 69, 70, 71, 78, 79, 80 } },
            { 62, new[] { 54, 55, 56, 57, 58, 59, 60, 61, 8, 17, 26, 35, 44, 53, 71, 80, 60, 61, 69, 70, 71, 78, 79, 80 } },
            { 63, new[] { 64, 65, 66, 67, 68, 69, 70, 71, 0, 9, 18, 27, 36, 45, 54, 72, 54, 55, 56, 64, 65, 72, 73, 74 } },
            { 64, new[] { 63, 65, 66, 67, 68, 69, 70, 71, 1, 10, 19, 28, 37, 46, 55, 73, 54, 55, 56, 63, 65, 72, 73, 74 } },
            { 65, new[] { 63, 64, 66, 67, 68, 69, 70, 71, 2, 11, 20, 29, 38, 47, 56, 74, 54, 55, 56, 63, 64, 72, 73, 74 } },
            { 66, new[] { 63, 64, 65, 67, 68, 69, 70, 71, 3, 12, 21, 30, 39, 48, 57, 75, 57, 58, 59, 67, 68, 75, 76, 77 } },
            { 67, new[] { 63, 64, 65, 66, 68, 69, 70, 71, 4, 13, 22, 31, 40, 49, 58, 76, 57, 58, 59, 66, 68, 75, 76, 77 } },
            { 68, new[] { 63, 64, 65, 66, 67, 69, 70, 71, 5, 14, 23, 32, 41, 50, 59, 77, 57, 58, 59, 66, 67, 75, 76, 77 } },
            { 69, new[] { 63, 64, 65, 66, 67, 68, 70, 71, 6, 15, 24, 33, 42, 51, 60, 78, 60, 61, 62, 70, 71, 78, 79, 80 } },
            { 70, new[] { 63, 64, 65, 66, 67, 68, 69, 71, 7, 16, 25, 34, 43, 52, 61, 79, 60, 61, 62, 69, 71, 78, 79, 80 } },
            { 71, new[] { 63, 64, 65, 66, 67, 68, 69, 70, 8, 17, 26, 35, 44, 53, 62, 80, 60, 61, 62, 69, 70, 78, 79, 80 } },
            { 72, new[] { 73, 74, 75, 76, 77, 78, 79, 80, 0, 9, 18, 27, 36, 45, 54, 63, 54, 55, 56, 63, 64, 65, 73, 74 } },
            { 73, new[] { 72, 74, 75, 76, 77, 78, 79, 80, 1, 10, 19, 28, 37, 46, 55, 64, 54, 55, 56, 63, 64, 65, 72, 74 } },
            { 74, new[] { 72, 73, 75, 76, 77, 78, 79, 80, 2, 11, 20, 29, 38, 47, 56, 65, 54, 55, 56, 63, 64, 65, 72, 73 } },
            { 75, new[] { 72, 73, 74, 76, 77, 78, 79, 80, 3, 12, 21, 30, 39, 48, 57, 66, 57, 58, 59, 66, 67, 68, 76, 77 } },
            { 76, new[] { 72, 73, 74, 75, 77, 78, 79, 80, 4, 13, 22, 31, 40, 49, 58, 67, 57, 58, 59, 66, 67, 68, 75, 77 } },
            { 77, new[] { 72, 73, 74, 75, 76, 78, 79, 80, 5, 14, 23, 32, 41, 50, 59, 68, 57, 58, 59, 66, 67, 68, 75, 76 } },
            { 78, new[] { 72, 73, 74, 75, 76, 77, 79, 80, 6, 15, 24, 33, 42, 51, 60, 69, 60, 61, 62, 69, 70, 71, 79, 80 } },
            { 79, new[] { 72, 73, 74, 75, 76, 77, 78, 80, 7, 16, 25, 34, 43, 52, 61, 70, 60, 61, 62, 69, 70, 71, 78, 80 } },
            { 80, new[] { 72, 73, 74, 75, 76, 77, 78, 79, 8, 17, 26, 35, 44, 53, 62, 71, 60, 61, 62, 69, 70, 71, 78, 79 } }
        };
    }

    private IDictionary<int, int[]> CellGroups { get; }

    private static IReadOnlyCollection<char> ValidValues { get; } = new[] { '1', '2', '3', '4', '5', '6', '7', '8', '9' };

    public string Solve(string input)
    {
        string result = input;

        bool done;
        do
        {
            int pre = result.Count(IsValid);

            result = TrySolveByExclusion(result);
            if (result.All(IsValid))
            {
                return result;
            }

            result = TrySolveByBruteForce(result);
            if (result.All(IsValid))
            {
                return result;
            }

            int post = result.Count(IsValid);
            done = post.Equals(pre);
        } while (!done);

        return result;
    }

    private static bool IsValid(char c) => ValidValues.Contains(c);

    private List<char>[] GetCandidates(IReadOnlyList<char> input)
    {
        var candidates = Enumerable.Range(0, input.Count).Select(x => new List<char>(ValidValues)).ToArray();
        for (int i = 0; i < input.Count; i++)
        {
            if (!IsValid(input[i]))
            {
                continue;
            }

            char value = input[i];
            foreach (int j in CellGroups[i])
            {
                candidates[j].Remove(value);
            }

            candidates[i].Clear();
        }

        return candidates;
    }

    private string TrySolveByBruteForce(string input)
    {
        char[] buffer = input.ToCharArray();
        var candidates = GetCandidates(buffer);
        var stilValid = new List<char>();

        for (int i = 0; i < input.Length; i++)
        {
            stilValid.Clear();

            foreach (char candidate in candidates[i])
            {
                var tmp = new StringBuilder(buffer.Length);
                tmp.Append(buffer, 0, i);
                tmp.Append(candidate);
                tmp.Append(buffer, i + 1, buffer.Length - i - 1);

                try
                {
                    // Förhoppningen är att denna skall ge fel på alla värden förutom ett
                    TrySolveByExclusion(tmp.ToString());
                    stilValid.Add(candidate);
                }
                catch (NotSolvableException) { }

                if (stilValid.Count > 1)
                {
                    break;
                }
            }

            if (stilValid.Count == 1)
            {
                buffer[i] = stilValid.Single();
            }
        }

        return new string(buffer);
    }

    private string TrySolveByExclusion(string input)
    {
        char[] buffer = input.ToCharArray();
        var candidates = GetCandidates(buffer);

        var addedValues = new Queue<int>(16);
        var handledCells = new HashSet<int>(input.Length);

        bool done = false;
        while (!done)
        {
            done = true;

            for (int i = 0; i < input.Length; i++)
            {
                if (candidates[i].Count == 1)
                {
                    char value = candidates[i].Single();

                    if (CellGroups[i].Any(j => buffer[j] == value))
                    {
                        throw new NotSolvableException();
                    }

                    buffer[i] = value;
                    candidates[i].Clear();

                    addedValues.Enqueue(i);
                }
            }

            while (addedValues.TryDequeue(out int pos))
            {
                if (!handledCells.Add(pos))
                {
                    addedValues.Enqueue(pos);
                }

                foreach (int j in CellGroups[pos])
                {
                    candidates[j].Remove(buffer[pos]);

                    if (candidates[j].Count == 0 && !IsValid(buffer[j]))
                    {
                        throw new NotSolvableException();
                    }
                }

                done = false;
            }
        }

        return new string(buffer);
    }
}